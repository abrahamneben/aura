CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

# configuration #####
#set(CUDA_TOOLKIT_ROOT_DIR "/usr/local/cuda/" CACHE STRING "CUDA path")

# choose CUDA, OPENCL
IF(NOT AURA_BACKEND)
  SET(AURA_BACKEND OPENCL)
ENDIF()

# set unit test device id 
IF(NOT AURA_UNIT_TEST_DEVICE)
  SET(AURA_UNIT_TEST_DEVICE 0)
ENDIF()
ADD_DEFINITIONS(-DAURA_UNIT_TEST_DEVICE=${AURA_UNIT_TEST_DEVICE})

# make additional modules available and source custom functions 
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
INCLUDE(cmake/functions.cmake)


# find Boost libraries #####
OPTION(BOOST_TEST_DYN_LINK "Link tests against dynamic version of boost unittest library" ON)
IF (WIN32)
    SET(Boost_USE_STATIC_LIBS ON)
ELSE ()
  IF (BOOST_TEST_DYN_LINK)
    ADD_DEFINITIONS(-DBOOST_TEST_DYN_LINK)
  ENDIF ()
ENDIF()
SET(BOOST_ROOT ${BOOST_ROOT} "/usr/local/boost")
FIND_PACKAGE(Boost COMPONENTS system thread filesystem unit_test_framework)

# find CUDA libraries #####
FIND_PACKAGE(CUDA)

# find OpenCL libraries #####
FIND_PACKAGE(OpenCL)

# sanity check found libraries and selected backend
IF(${AURA_BACKEND} STREQUAL CUDA)
  IF(NOT ${CUDA_FOUND})
    MESSAGE(FATAL_ERROR "CUDA backend selected but CUDA could not be found")
  ELSE()
    SET(AURA_BACKEND_LIBRARIES ${CUDA_LIBRARIES} libcuda.so)
    SET(AURA_BACKEND_INCLUDE_DIRS ${CUDA_INCLUDE_DIRS})
    SET(AURA_FFT_LIBRARIES ${CUDA_CUFFT_LIBRARIES})
    SET(AURA_BACKEND_CUDA 1)
    SET(AURA_BACKEND_OPENCL 0)
    SET(AURA_KERNEL_COMPILER_ARGS "-DAURA_BACKEND_CUDA")
    ADD_DEFINITIONS(-DAURA_BACKEND_CUDA)
    ADD_DEFINITIONS(-DAURA_FFT_CUFFT)
    LINK_DIRECTORIES(${LINK_DIRECTORIES} /usr/lib/arm-linux-gnueabihf/tegra)
    SET(CUDA_NVCC_FLAGS -arch compute_20)
  ENDIF()
ENDIF()
IF(${AURA_BACKEND} STREQUAL OPENCL)
  IF(NOT ${OPENCL_FOUND})
    MESSAGE(FATAL_ERROR "OpenCL backend selected but OpenCL could not be found")
  ELSE()
    SET(AURA_BACKEND_LIBRARIES ${OPENCL_LIBRARIES})
    SET(AURA_BACKEND_INCLUDE_DIRS ${OPENCL_INCLUDE_DIRS})
 
    FIND_PACKAGE(clFFT)
    IF(${CLFFT_FOUND})
      SET(AURA_FFT_LIBRARIES ${CLFFT_LIBRARIES})
      INCLUDE_DIRECTORIES(${CLFFT_INCLUDE_DIRS})
      ADD_DEFINITIONS(-DAURA_FFT_CLFFT)
    ELSE()
      SET(AURA_FFT_LIBRARIES "") 
      SET(AURA_FFT_CLFFT 0)
    ENDIF()

    FIND_PACKAGE(clBLAS)
    IF(${CLBLAS_FOUND})
      SET(AURA_BLAS_LIBRARIES ${CLBLAS_LIBRARIES})
      INCLUDE_DIRECTORIES(${CLBLAS_INCLUDE_DIRS})
      ADD_DEFINITIONS(-DAURA_BLAS_CLBLAS)
    ELSE()
      SET(AURA_BLAS_LIBRARIES "") 
      SET(AURA_BLAS_CLBLAS 0)
    ENDIF()

    SET(AURA_BACKEND_CUDA 0)
    SET(AURA_BACKEND_OPENCL 1)
    SET(AURA_KERNEL_COMPILER_ARGS "-DAURA_BACKEND_OPENCL")
    ADD_DEFINITIONS(-DAURA_BACKEND_OPENCL)
  ENDIF()
ENDIF()
STRING(TOLOWER "${AURA_BACKEND}" AURA_BACKEND_LC)
MESSAGE(STATUS "Using ${AURA_BACKEND} backend")


# find FFTW libraries #####
FIND_PACKAGE(FFTW)
IF(${FFTW_FOUND})
	SET(AURA_FFT_HOST_LIBRARIES ${FFTW_LIBRARIES})
	INCLUDE_DIRECTORIES(${FFTW_INCLUDES})
ENDIF()

# compiler settings
SET(CMAKE_CXX_FLAGS "-Wall -std=c++0x -g -O3")

# used for OpenCL kernels that need to have the include dirs at runtime
SET(AURA_KERNEL_COMPILER_ARGS "${AURA_KERNEL_COMPILER_ARGS} -I${PROJECT_SOURCE_DIR}/include/")
SET(AURA_KERNEL_COMPILER_ARGS "${AURA_KERNEL_COMPILER_ARGS} -I${CMAKE_BINARY_DIR}")
ADD_DEFINITIONS(-DAURA_BACKEND_COMPILE_FLAGS="${AURA_KERNEL_COMPILER_ARGS}")
# looks like if we do this, we don't need to link liboostsystem
ADD_DEFINITIONS(-DBOOST_SYSTEM_NO_DEPRECATED)

# used for unittests to find the kernels
ADD_DEFINITIONS(-DAURA_UNIT_TEST_LOCATION="${CMAKE_BINARY_DIR}/test/")

# set global include directories for project 
INCLUDE_DIRECTORIES("${AURA_BACKEND_INCLUDE_DIRS}")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/include/")
INCLUDE_DIRECTORIES("${Boost_INCLUDE_DIRS}/")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/generated/")

# enable testing
ENABLE_TESTING()

# add subdirectories
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/examples/)
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/experiment/)
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/test/)
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/bench/)

